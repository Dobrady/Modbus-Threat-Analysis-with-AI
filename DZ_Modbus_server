import asyncio
import signal
import os
import subprocess
from pymodbus.server import StartAsyncTcpServer
from pymodbus.datastore import ModbusSequentialDataBlock
from pymodbus.datastore import ModbusSlaveContext, ModbusServerContext
from pymodbus.device import ModbusDeviceIdentification

# Configuration
SERVER_IP = "192.168.56.112"
SERVER_PORT = 502  # Use a higher port if running without root privileges, e.g., 1502

def kill_existing_server(port):
    """Checks if a process is already using the specified port and terminates it."""
    try:
        # Retrieve the PID of the process using the port
        result = subprocess.run(
            ["sudo", "lsof", "-t", f"-i:{port}"], capture_output=True, text=True
        )
        
        if result.stdout.strip():
            pids = result.stdout.strip().split("\n")
            for pid in pids:
                print(f"Terminating existing Modbus server (PID: {pid})...\n")
                os.system(f"sudo kill -9 {pid}")
        else:
            print(f"No active Modbus server found on port {port}.\n")
    except Exception as e:
        print(f"Error occurred while checking for existing server: {e}")

def create_modbus_identity():
    """Define the Modbus server identification details."""
    identity = ModbusDeviceIdentification()
    identity.VendorName = "https://www.cyberseclab.eu"
    identity.ProductCode = "EXP2025"
    identity.VendorUrl = "https://github.com/Dobrady/Modbus-Threat-Analysis-with-AI.git"
    identity.ProductName = "Modbus Experimental Server"
    identity.ModelName = "ICS Modbus Security Testbed"
    identity.MajorMinorRevision = "v1.0.7"
    identity.UserApplicationName = "Industrial Control Cybersecurity Test"
    return identity

async def start_server():
    """Initializes and starts a Modbus TCP server with proper signal handling and identity setup."""
    store = ModbusSlaveContext(
        di=ModbusSequentialDataBlock(0, [17] * 100),
        co=ModbusSequentialDataBlock(0, [17] * 100),
        hr=ModbusSequentialDataBlock(0, [17] * 100),
        ir=ModbusSequentialDataBlock(0, [17] * 100)
    )
    context = ModbusServerContext(slaves=store, single=True)
    identity = create_modbus_identity()  # Assign identity details

    stop_event = asyncio.Event()

    def handle_signal():
        print("\nTermination signal received. Shutting down the server...")
        stop_event.set()

    loop = asyncio.get_running_loop()
    loop.add_signal_handler(signal.SIGINT, handle_signal)
    loop.add_signal_handler(signal.SIGTERM, handle_signal)

    print(f"Initializing Modbus server on {SERVER_IP}:{SERVER_PORT} with device identity...\n")

    # Start the server with identity details
    server_task = asyncio.create_task(StartAsyncTcpServer(
        context, identity=identity, address=(SERVER_IP, SERVER_PORT)
    ))
    # Print identity details to the terminal after the server starts
    print(f"Vendor Name:         {identity.VendorName}")
    print(f"Product Code:        {identity.ProductCode}")
    print(f"Vendor URL:          {identity.VendorUrl}")
    print(f"Product Name:        {identity.ProductName}")
    print(f"Model Name:          {identity.ModelName}")
    print(f"Version:             {identity.MajorMinorRevision}")
    print(f"Application Name:    {identity.UserApplicationName}")
    print("------------------------------------\n")
    print(f"---> Modbus Server is runing on {SERVER_IP}:{SERVER_PORT} <---")
    
    await stop_event.wait()

    # Gracefully stop the server
    server_task.cancel()
    try:
        await server_task
    except asyncio.CancelledError:
        print("Modbus server successfully stopped.")

if __name__ == "__main__":
    # Automatically terminate any existing Modbus server running on the specified port
    kill_existing_server(SERVER_PORT)

    try:
        asyncio.run(start_server())
    except KeyboardInterrupt:
        print("\nModbus server interrupted. Exiting gracefully.")
